service: workout-logger

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.8
  region: us-east-1
  stage: dev
  timeout: 10
  memorySize: 128
  environment:
    REGION_NAME: ${self:provider.region}
    DYNAMODB_TABLE: ${self:custom.dynamoTable}

  iam:
    role:
      statements:
      - Effect: 'Allow'
        Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
          - dynamodb:DescribeTable
          - dynamodb:BatchWriteItem
        Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

custom:
  dynamoTable: workout-table
  pythonRequirements:
    dockerizePip: true

functions:
  post:
    handler: handler.workout_log
    events:
      - http:
            path: workouts/add
            method: post
            cors: true

  list:
    handler: handler.workout_list
    events:
      - http:
          path: workouts/all
          method: get
          cors: true

  get:
      handler: handler.workout_search
      events:
        - http:
            path: workouts/get/{id}
            method: get
            cors: true

  delete:
        handler: handler.workout_delete
        events:
          - http:
              path: workouts/delete/{id}
              method: delete
              cors: true

  destroy:
        handler: handler.delete_all_the_things
        events:
          - http:
              path: workouts/delete/all
              method: delete
              cors: true

resources:
  Resources:
    ImagesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

plugins:
  serverless-python-requirements